#!/usr/bin/python
## Copyright (c) 2013-2014 Quanta Research Cambridge, Inc.

## Permission is hereby granted, free of charge, to any person
## obtaining a copy of this software and associated documentation
## files (the "Software"), to deal in the Software without
## restriction, including without limitation the rights to use, copy,
## modify, merge, publish, distribute, sublicense, and/or sell copies
## of the Software, and to permit persons to whom the Software is
## furnished to do so, subject to the following conditions:

## The above copyright notice and this permission notice shall be
## included in all copies or substantial portions of the Software.

## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
## EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
## MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
## NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
## BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
## ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
## CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
## SOFTWARE.

import os, sys, shutil, string
import AST
import bsvgen
import xpsgen
import cppgen
import syntax
import argparse
import subprocess
import util
import re
import glob
import time

AST.TypeDef.__bases__ += (cppgen.TypeDefMixin,)
AST.Function.__bases__ += (cppgen.NoCMixin,)
AST.Module.__bases__ += (cppgen.NoCMixin,)
AST.Method.__bases__ += (cppgen.MethodMixin,bsvgen.MethodMixin)
AST.StructMember.__bases__ += (cppgen.StructMemberMixin,)
AST.Struct.__bases__ += (cppgen.StructMixin,bsvgen.NullMixin)
AST.EnumElement.__bases__ += (cppgen.EnumElementMixin,)
AST.Enum.__bases__ += (cppgen.EnumMixin,bsvgen.EnumMixin)
AST.Type.__bases__ += (cppgen.TypeMixin,bsvgen.TypeMixin)
AST.Param.__bases__ += (cppgen.ParamMixin,bsvgen.ParamMixin)
AST.Interface.__bases__ += (cppgen.InterfaceMixin,bsvgen.InterfaceMixin)

supported_boards = ['ac701', 'zedboard', 'zc702', 'zc706', 'kc705', 'vc707', 'bluesim']
supported_os = ['android', 'ubuntu']

argparser = argparse.ArgumentParser("Generate C++/BSV/Xilinx stubs for an interface.")
argparser.add_argument('bsvfile', help='BSV files to parse', nargs='+')
argparser.add_argument('-B', '--board', default='zc702', choices=supported_boards,
                       help='Board to generate stubs and ucf constraints for')
argparser.add_argument('-O', '--OS', default=None, choices=supported_os,
                       help='Target operating system')
argparser.add_argument('-s2h', '--s2hinterface', help='BSV interface to generate stubs for software to hardware communication', action='append')
argparser.add_argument('-h2s', '--h2sinterface', help='BSV interface to generate stubs for hardware to software communication', action='append')
argparser.add_argument('-p', '--project-dir', default='./xpsproj', help='xps project directory')
argparser.add_argument('-e', '--edk-version', default=xpsgen.edkversion, help='Xilinx EDK version', choices=xpsgen.edkversions)
argparser.add_argument('-s', '--source', help='C++ source files', action='append')
argparser.add_argument('-I', '--contentid', help='Specify 64-bit contentid for PCIe designs')
argparser.add_argument('-V', '--verilog', help='Additional verilog sources', action='append')
argparser.add_argument('-C', '--constraint', help='Additional constraint files', action='append')
argparser.add_argument('-M', '--make', help='Run make on the specified targets', action='append')
argparser.add_argument('-x', '--export', help='Promote/export named interface from top module')
argparser.add_argument('-t', '--topbsv', help='Top-level bsv file')
argparser.add_argument('-l', '--clib', default=[], help='C++ libary', action='append')
argparser.add_argument('-T', '--tcl', default=[], help='Vivado tcl script', action='append')
argparser.add_argument('-b', '--bscflags', default=[], help='Options to pass to the BSV compiler', action='append')

tclReadVerilogTemplate='read_verilog [ glob %(verilog)s/*.v ]'

tclfileConstraintTemplate='''read_xdc {./constraints/%(xdcname)s}'''

tclboardTemplate='''
set partname {%(partname)s}
set boardname {%(boardname)s}
set xbsvdir {%(xbsvdir)s}
'''

tclfileTemplate='''
# NOTE: typical usage would be "vivado -mode tcl -source create_mkPcieTop_batch.tcl" 
#
# STEP#0: define output directory area.
#
set outputDir ./hw
file mkdir $outputDir
#
# STEP#1: setup design sources and constraints
#
read_verilog [ glob {verilog/top/*.v} ]
%(read_verilog)s
%(tclfileConstraints)s

# STEP#2: run synthesis, report utilization and timing estimates, write checkpoint design
#
synth_design -name %(Dut)s -top %(Dut)s -part %(partname)s -flatten rebuilt

write_checkpoint -force $outputDir/%(dut)s_post_synth
write_verilog -force $outputDir/%(dut)s_netlist.v
#report_timing_summary -file $outputDir/%(dut)s_post_synth_timing_summary.rpt
#report_power -file $outputDir/%(dut)s_post_synth_power.rpt

#
# STEP#3: run placement and logic optimization, report utilization and timing estimates, write checkpoint design
#
%(sourceTcl)s
%(rewire_clock)s
opt_design
# power_opt_design
place_design
phys_opt_design
write_checkpoint -force $outputDir/%(dut)s_post_place
report_timing_summary -file $outputDir/%(dut)s_post_place_timing_summary.rpt
#
# STEP#4: run router, report actual utilization and timing, write checkpoint design, run drc, write verilog and xdc out
#
route_design
write_checkpoint -force $outputDir/%(dut)s_post_route
report_timing_summary -file $outputDir/%(dut)s_post_route_timing_summary.rpt
report_timing -sort_by group -max_paths 100 -path_type summary -file $outputDir/%(dut)s_post_route_timing.rpt
#report_clock_utilization -file $outputDir/%(dut)s_clock_util.rpt
#report_utilization -file $outputDir/%(dut)s_post_route_util.rpt
#report_power -file $outputDir/%(dut)s_post_route_power.rpt
#report_drc -file $outputDir/%(dut)s_post_imp_drc.rpt
#write_verilog -force $outputDir/%(dut)s_impl_netlist.v
write_xdc -no_fixed_only -force $outputDir/%(dut)s_impl.xdc
#
# STEP#5: generate a bitstream
# 
write_bitstream -force -bin_file $outputDir/%(Dut)s.bit
'''

tclzynqrewireclock = '''
foreach {pat} {CLK_unused_clock* CLK_GATE_unused_clock* RST_N_unused_reset* CLK_GATE_hdmi_clock_if RST_N_hdmi_reset_if} {
    foreach {net} [get_nets $pat] {
	disconnect_net -net $net -objects [get_pins -of_objects $net]
    }
}
'''

makefileTemplate='''
DTOP=%(project_dir)s
XBSVDIR=%(xbsvdir)s
BSVPATH = %(bsvpath)s
vfile=verilog/top/%(topbsvmod)s.v

BOARD=%(boardname)s
MKTOP=%(topbsvmod)s
OS=%(OS)s
ifeq ($(OS),android)
ALLTARGETS=android_exe bits
else
ALLTARGETS=ubuntu_exe implementation
endif

BSCFLAGS = -show-schedule -aggressive-conditions --wait-for-license -bdir $(DTOP)/obj -vdir $(DTOP)/verilog/top -simdir $(DTOP)/obj  -D TimeStamp=%(timestamp)s %(bscflags)s
BSIM_CXX = $(XBSVDIR)/cpp/BsimCtrl.cxx $(XBSVDIR)/cpp/BsimDma.cxx $(XBSVDIR)/cpp/sock_utils.cxx $(XBSVDIR)/cpp/sock_fd.cxx

all: $(ALLTARGETS)

S2H = %(s2hinterface)s
H2S = %(h2sinterface)s
BSVFILES = %(bsvfiles)s
CPPFILES=%(sourcefiles)s $(addprefix %(project_dir)s/jni/, %(generatedCFiles)s)

timestampfile=sources/%(dut)s/.timestamp

$(timestampfile): %(bsvfiles)s
	cd $(DTOP); \
	$(XBSVDIR)/genxpsprojfrombsv -B$(BOARD) -p $(BOARD) -x $(MKTOP) \
	$(foreach s2h, $(S2H), -s2h $(s2h)) \
	$(foreach h2s, $(H2S), -h2s $(h2s)) \
	$(foreach f, $(CPPFILES), -s $f) \
        -t $(XBSVDIR)/bsv/$(TOP).bsv $(XBSVFLAGS) $(BSVFILES)
	touch $(timestampfile)

$(vfile): %(topbsvfile)s %(bsvfiles)s $(timestampefile)
	mkdir -p verilog/top verilog/portal
	cd sources/%(dut)s; mkdir -p $(DTOP)/obj; bsc %(bsvdefines)s $(BSCFLAGS) -remove-dollar -p +:$(BSVPATH) -verilog -u -g %(topbsvmod)s %(topbsvfile)s
	for v in verilog/top/*.v; do $(XBSVDIR)/scripts/copy_verilog.py $$v $(subst :, ,$(BSVPATH)); done

BSIM_EXE_CXX_FILES = BsimDma.cxx BsimCtrl.cxx portal.cpp sock_fd.cxx sock_utils.cxx PortalMemory.cpp
BSIM_EXE_CXX = $(addprefix $(XBSVDIR)/cpp/, $(BSIM_EXE_CXX_FILES))

bsim_exe:  $(CPPFILES) $(BSIM_EXE_CXX)
	cd jni; g++ -g -O -o bsim_exe -I$(XBSVDIR)/lib/cpp -I%(project_dir)s/jni %(includepath)s $(BSIM_EXE_CXX) $(CPPFILES) -pthread -I$(XBSVDIR) -I$(XBSVDIR)/cpp -DBSIM %(clibs)s

ubuntu_exe:
	cd jni; make

bsim: $(timestampfile)
	cd sources; mkdir -p $(DTOP)/obj; bsc -D BSIM %(bsvdefines)s $(BSCFLAGS) -p +:$(BSVPATH):%(dut)s/ -sim -u -g %(topbsvmod)s %(topbsvfile)s
	export BSC_CXXFLAGS="-I$(XBSVDIR)/cpp -I$(XBSVDIR) -DBSIM" ; cd sources; bsc $(BSCFLAGS) -p +:$(BSVPATH):%(dut)s/ -sim -e mkBsimTop -o bsim $(DTOP)/obj/*.ba $(BSIM_CXX)

verilog: $(vfile)

lint: $(vfile)
	verilator --error-limit 200 --lint-only -Isources/%(dut)s -Isources/source $(vfile)

hw/%(Dut)s.bit: $(vfile)
	vivado -mode batch -source %(dut)s-impl.tcl

implementation: hw/%(Dut)s.bit

program:
	fpgajtag hw/%(Dut)s.bin

reprogram:
	vivado -mode batch -source %(dut)s-reprogram.tcl
	xbsvutil reset /dev/fpga0

## for partial reconfiguration on VC707
verilog/portal/mkSynthesizeablePortalTop.v:
	mkdir -p verilog/portal
	mv -fv verilog/top/mkSynthesizeablePortalTop.v verilog/portal

## (*black_box*) causes vivado to ignore contents of the module and treat it as a black box
verilog/top/portalstub.v:
	make verilog/portal/mkSynthesizeablePortalTop.v
	cat verilog/portal/mkSynthesizeablePortalTop.v | sed 's/^module /(*black_box*)module /' > verilog/top/portalstub.v

hw/portaltop_post_synth.dcp: verilog/portal/mkSynthesizeablePortalTop.v $(vfile)
	make verilog/top/portalstub.v
	vivado -mode batch -source $(XBSVDIR)/scripts/portaltop-synth.tcl

hw/mkpcietop_post_synth.dcp:
	make verilog/top/portalstub.v
	vivado -mode batch -source $(XBSVDIR)/scripts/mkpcietop-synth.tcl

hw/mkPcieTop_pblock_portalTop_partial.bit: hw/mkpcietop_post_synth.dcp hw/portaltop_post_synth.dcp
	vivado -mode batch -source $(XBSVDIR)/scripts/mkpcietop-partial-reconfiguration.tcl

partial: hw/mkPcieTop_pblock_portalTop_partial.bit

ifeq ($(OS),android)

%(Dut)s.bit.bin.gz: hw/%(Dut)s.bit
	xxd hw/%(Dut)s.bin | sed -e "s/  .*//" -e "s/ \(..\)\(..\) \(..\)\(..\)/ \\4\\3 \\2\\1/g" | xxd -r >%(Dut)s.bit.bin
	gzip -f %(Dut)s.bit.bin
bits: %(Dut)s.bit.bin.gz

else
bits: hw/%(Dut)s.bit
endif

android_exe:
	ndk-build

ifeq ($(BOARD),bluesim)

run:
	./sources/bsim& bsimpid=$$!; echo bsimpid $$bsimpid; ./jni/bsim_exe; retcode=$$?; kill $$bsimpid; exit $$retcode

else

    ifeq ($(OS),android)

run:
	$(XBSVDIR)/scripts/run.zedboard $(RUNPARAM) `find . -name \*.gz` `find . -name android_exe | grep libs`

    else

run: program
	timeout 3m catchsegv ./jni/mkpcietop

    endif
endif

JENKINS_HOST=sj9.qrclab.com
jenkins:
	$(XBSVDIR)/scripts/run.jenkins $(JENKINS_HOST) %(dut)s $(BOARD)

hwclean:
	rm -fr obj hw vivado*.jou vivado*.log fsm_encoding.os .Xil

clean: hwclean
	rm -fr verilog
'''

def preprocess(source, defs):
    
    stack = [(True,True)]

    def pp(s):
        cond  = stack[-1][0]
        valid = stack[-1][1]
        i = re.search('\n`', s)
        if i == None:
            return s
        pre = s[:i.end()-1]
        s = s[i.end():]
        j = re.search('\s', s)
        tok = s[:j.start()]
        s = s[j.end():]
        if tok == 'ifdef':
            k = re.search('\s', s)
            sym = s[:k.start()]
            s = s[k.end():]
            new_cond = sym in defs
            new_valid = new_cond and valid
            stack.append((new_cond,new_valid))
        elif tok == 'ifndef':
            k = re.search('\s', s)
            sym = s[:k.start()]
            s = s[k.end():]
            new_cond = not sym in defs
            new_valid = valid and new_cond
            stack.append((new_cond,new_valid))
        elif tok == 'else':
            new_cond = not cond
            stack.pop()
            stack.append((new_cond,valid))
        elif tok == 'endif':
            stack.pop()
        elif tok == 'define':
            k = re.search('\s', s)
            sym = s[:k.start()]
            defs.append(sym)
        else:
            assert(False)
        prv = pre if valid and cond else '\n\n'
        return prv+pp('\n'+s)

    return pp(source)

if __name__=='__main__':
    exename = os.path.abspath(sys.argv[0])
    xbsvdir = os.path.dirname(exename)
    namespace = argparser.parse_args()

    if not namespace.export:
        sys.stderr.write('Must specify top level module name via -x/--export flag\n')
        sys.exit(-1)
    if not namespace.topbsv:
        sys.stderr.write('Must specify top BSV file via -t/--topbsv flag\n')
        sys.exit(-1)
    if not namespace.source:
        namespace.source = []
    if not namespace.constraint:
        namespace.constraint = []
    if not namespace.verilog:
        namespace.verilog = []
    if not namespace.tcl:
        namespace.tcl = []

    project_dir = os.path.expanduser(namespace.project_dir)
    srcdirs = []

    # remove intermediate files generated by parser generator
    # this is necessary due to silent failures when syntax.py is compiled
    os.path.exists('./parser.out')   and os.remove('./parser.out')
    os.path.exists('./parsetab.pyc') and os.remove('./parsetab.pyc')
    os.path.exists('./parsetab.py')  and os.remove('./parsetab.py')
    
    dutname = namespace.export
    boardname = namespace.board.lower()

    bsvdefines = []
    if boardname == 'kc705':
        bsvdefines += ['Kintex7', 'PCIE']
    elif boardname == 'vc707':
        bsvdefines += ['Virtex7', 'PCIE']
    elif boardname == 'ac701':
        bsvdefines += ['Artix7',  'PCIE']
    elif boardname == 'zedboard':
        bsvdefines += ['ZYNQ']
    elif boardname == 'zc702':
        bsvdefines += ['ZYNQ']

    if not (os.path.abspath(os.path.join(xbsvdir, 'bsv', 'PortalMemory.bsv')) in map(os.path.abspath, namespace.bsvfile)):
        namespace.bsvfile.append(os.path.join(xbsvdir, 'bsv', 'PortalMemory.bsv'))

    for inputfile in namespace.bsvfile:
        inputdir = os.path.dirname(inputfile)
        if not inputdir in srcdirs:
            srcdirs.append(inputdir)
        s0 = open(inputfile).read() + '\n'
        s1 = preprocess(s0, bsvdefines)
        s2 = syntax.parse(s1,inputfile)

    needs_pcie_7x_gen1x8 = False
    rewireclockstring = ''
    topmodulename = dutname
    if boardname == 'kc705':
        if not 'os' in namespace: namespace.os = 'ubuntu'
        partname = 'xc7k325tffg900-2'
        needs_pcie_7x_gen1x8 = True
    elif boardname == 'vc707':
        if not 'os' in namespace: namespace.os = 'ubuntu'
        partname = 'xc7vx485tffg1761-2'
        needs_pcie_7x_gen1x8 = True
    elif boardname == 'ac701':
        if not 'os' in namespace: namespace.os = 'ubuntu'
        partname = 'xc7a200tfbg676-2'
        needs_pcie_7x_gen1x8 = True
    elif boardname == 'zc706':
        if not 'os' in namespace: namespace.os = 'android'
        partname = 'xc7z045ffg900-2'
        rewireclockstring = tclzynqrewireclock
        namespace.verilog.append(os.path.join(xbsvdir, 'verilog'))
        #namespace.verilog.append(os.path.join(xbsvdir, 'xilinx', 'sources', 'processing_system7'))
        namespace.constraint.append(os.path.join(xbsvdir, 'xilinx/constraints/zc7z045ffg900.xdc'))
    else:
        if not 'os' in namespace: namespace.os = 'android'
        partname = 'xc7z020clg484-1'
        rewireclockstring = tclzynqrewireclock
        namespace.verilog.append(os.path.join(xbsvdir, 'verilog'))
        namespace.constraint.append(os.path.join(xbsvdir, 'xilinx/constraints/zc7z020clg484.xdc'))

    namespace.constraint.append(os.path.join(xbsvdir, 'xilinx/constraints/%s.xdc' % boardname))
    if needs_pcie_7x_gen1x8:
        subprocess.call(['make', '-C', xbsvdir, 'xilinx/pcie_7x_gen1x8'])
        namespace.verilog.append(os.path.join(xbsvdir, 'xilinx', 'pcie_7x_gen1x8', 'pcie_7x_0', 'source'))
        namespace.verilog.append(os.path.join(xbsvdir, 'xilinx', 'pcie_7x_gen1x8', 'source'))
        namespace.verilog.append(os.path.join(xbsvdir, 'xilinx', 'pcie_7x_gen1x8', 'synth'))
        namespace.verilog.append(os.path.join(xbsvdir, 'xilinx', '7x', 'pcie', 'source'))

    # this is an ugly abuse of typeclassinstance
    for v in syntax.globaldecls:
        if (v.type == 'TypeclassInstance' and v.name == 'PortalMemory'):
            assert (len(v.params) == 1)
            syntax.globalvars[v.params[0].name].typeClassInstances.append(v.name)

    ## code generation pass
    swProxies = []
    hwProxies = []
    swWrappers = []
    hwWrappers = []

    if not namespace.s2hinterface:
        namespace.s2hinterface = []
    if not namespace.h2sinterface:
        namespace.h2sinterface = []

    for i in set(namespace.s2hinterface + namespace.h2sinterface):
        ifc = syntax.globalvars[i]
        ifc = ifc.instantiate(dict(zip(ifc.params, ifc.params)))
        ifc.ind = AST.Interface(i, [], [], None, ifc.package)
        ifc.ind.insertPutFailedMethod()
        ifc.ind.req = ifc
        ifc.assignRequestResponseChannels()
        ifc.ind.assignRequestResponseChannels()
        if i in namespace.s2hinterface:
            swProxies.append(ifc)
            hwWrappers.append(ifc)
        if i in namespace.h2sinterface:
            hwProxies.append(ifc)
            swWrappers.append(ifc)

    def create_cpp_file(name):
        fname = os.path.join(project_dir, 'jni', name)
        f = util.createDirAndOpen(fname, 'w')
        print "Writing file ",fname
        f.write('#include "portal.h"\n')
        f.write('#include "GeneratedTypes.h"\n');
        f.write('#include <stdio.h>\n')
        f.write('#include <stdlib.h>\n')
        return f

    generatedCFiles = []

    for i in swProxies:
        cppname = '%sProxy.cpp' % i.name
        hppname = '%sProxy.h' % i.name
        hpp = create_cpp_file(hppname)
        cpp = create_cpp_file(cppname)
        hpp.write('#ifndef _%(name)s_H_\n#define _%(name)s_H_\n' % {'name': i.name.upper()})
        cpp.write('#include "%s"' % hppname)
        hpp.write('#include "%s.h"' % i.parentClass("portal"))
        i.ind.emitCWrapperDeclaration(hpp, "ProxyStatus")
        i.emitCProxyDeclaration(hpp, "Proxy")
        i.ind.emitCWrapperImplementation(cpp, "ProxyStatus")
        i.emitCProxyImplementation(cpp, "Proxy")
        hpp.write('#endif // _%(name)s_H_\n' % {'name': i.name.upper()})
        hpp.close();
        cpp.close();
        generatedCFiles.append(cppname)

    for i in swWrappers:
        cppname = '%sWrapper.cpp' % i.name
        hppname = '%sWrapper.h' % i.name
        hpp = create_cpp_file(hppname)
        cpp = create_cpp_file(cppname)
        hpp.write('#ifndef _%(name)s_H_\n#define _%(name)s_H_\n' % {'name': i.name.upper()})
        cpp.write('#include "%s"' % hppname)
        i.ind.emitCProxyDeclaration(hpp, "WrapperStatus")
        i.emitCWrapperDeclaration(hpp, "Wrapper")
        i.ind.emitCProxyImplementation(cpp, "WrapperStatus")
        i.emitCWrapperImplementation(cpp, "Wrapper")
        hpp.write('#endif // _%(name)s_H_\n' % {'name': i.name.upper()})
        hpp.close();
        cpp.close();
        generatedCFiles.append(cppname)
    
    hname = os.path.join(project_dir, 'jni', 'GeneratedTypes.h')
    hpp = util.createDirAndOpen(hname, 'w')
    hpp.write('#ifndef __GENERATED_TYPES__\n');
    hpp.write('#define __GENERATED_TYPES__\n');
    # global type declarations used by interface mthods
    for v in syntax.globaldecls:
        if (v.type == 'TypeDef'):
            v.emitCDeclaration(hpp)
    hpp.write('#endif //__GENERATED_TYPES__\n');
    hpp.close();

    def create_bsv_package(pname, files=[]):
        fname = os.path.join(project_dir, 'sources', dutname.lower(), '%s.bsv' % pname)
        bsv_file = util.createDirAndOpen(fname, 'w')
        bsv_file.write('package %s;\n' % pname)
        bsvgen.emitPreamble(bsv_file, files)
        print 'Writing file ', fname
        return bsv_file

    def close_bsv_package(bsv_file, pname):
        bsv_file.write('endpackage: %s\n' % pname)
        bsv_file.close()

    for i in hwWrappers:
        pname = '%sWrapper' % i.name
        bsv = create_bsv_package(pname, i.package)
        i.ind.emitBsvProxy(bsv, "WrapperStatus", False)
        i.emitBsvWrapper(bsv, "Wrapper", True)
        close_bsv_package(bsv,pname)
        
    for i in hwProxies:
        pname = '%sProxy' % i.name
        bsv = create_bsv_package(pname, i.package)
        i.ind.emitBsvWrapper(bsv, "ProxyStatus",False)
        i.emitBsvProxy(bsv, "Proxy",True)
        close_bsv_package(bsv,pname)

    tclboardname = os.path.join(project_dir, 'board.tcl')
    tclimplname = os.path.join(project_dir, '%s-impl.tcl' % namespace.export.lower())
    tclsynthname = os.path.join(project_dir, '%s-synth.tcl' % namespace.export.lower())
    makename = os.path.join(project_dir, 'Makefile')
    timestampname = os.path.join(project_dir, 'sources', dutname.lower(), '.timestamp')

    applicationmkname = os.path.join(project_dir, 'jni', 'Application.mk')
    androidmkname = os.path.join(project_dir, 'jni', 'Android.mk')
    linuxmkname = os.path.join(project_dir, 'jni', 'Makefile')
 
    if os != 'android':
        xpsgen.writeImpactCmd(dutname, os.path.join(project_dir, 'impact.cmd'))
        xpsgen.writeProgramTcl(dutname, os.path.join(project_dir, '%s-program.tcl' % dutname.lower()))
        xpsgen.writeReprogramTcl(dutname, os.path.join(project_dir, '%s-reprogram.tcl' % dutname.lower()))

    print 'Writing Android.mk', androidmkname
    print 'Writing Application.mk', applicationmkname
    cppgen.writeAndroidMk(namespace.source, generatedCFiles, androidmkname, applicationmkname, xbsvdir, project_dir)
    cppgen.writeLinuxMk(dutname, linuxmkname, xbsvdir, namespace.source, swProxies, swWrappers, namespace.clib)

    print 'Writing tcl impl file', tclimplname
    tclsubsts = {'dut': topmodulename.lower(),
                 'Dut': topmodulename,
                 'rewire_clock': rewireclockstring,
                 'sourceTcl': ''.join(['source {%s}\n' % os.path.basename(tcl) for tcl in namespace.tcl]),
                 'project_dir': project_dir,
                 'partname': partname,
                 'boardname': boardname,
                 'xbsvdir': xbsvdir,
                 'tclfileConstraints': '\n'.join([tclfileConstraintTemplate
                                                  % { 'xdcname': os.path.basename(f) }
                                                  for f in namespace.constraint ]),
                 'read_verilog': '\n'.join([tclReadVerilogTemplate
                                            % { 'verilog': f } for f in namespace.verilog])
                 }
    tcl = util.createDirAndOpen(tclimplname, 'w')
    tcl.write(tclfileTemplate % tclsubsts)
    tcl.close()
    tcl = util.createDirAndOpen(tclboardname, 'w')
    tcl.write(tclboardTemplate % tclsubsts)
    tcl.close()

    if namespace.verilog:
        for verilog in namespace.verilog:
            print 'Copying verilog sources from', verilog
            dstverilog = os.path.join(project_dir, 'sources', os.path.basename(verilog))
            ## this path is here so we can overwrite sources
            if os.path.exists(dstverilog):
                for f in glob.glob(os.path.join(verilog, '*')):
                    print f, os.path.basename(f)
                    dstpath = os.path.join(project_dir, 'sources', os.path.basename(verilog), os.path.basename(f))
                    if os.path.isfile(f):
                        shutil.copyfile(f, dstpath)
                    else:
                        shutil.copytree(f, dstpath)
            else:
                shutil.copytree(verilog, os.path.join(project_dir, 'sources', os.path.basename(verilog)))
    if namespace.constraint:
        for constraint in namespace.constraint:
            print 'Copying constraint file from', constraint
            dstconstraintdir = os.path.join(project_dir, 'constraints')
            if not os.path.exists(dstconstraintdir):
                os.makedirs(dstconstraintdir)
            ## this path is here so we can overwrite sources
            shutil.copy(constraint, dstconstraintdir)
    if namespace.tcl:
        for tcl in namespace.tcl:
            print 'Copying tcl file from', tcl
            ## this path is here so we can overwrite sources
            shutil.copy(tcl, project_dir)

    print 'Writing Makefile', makename
    make = util.createDirAndOpen(makename, 'w')
    make.write(makefileTemplate % {'xbsvdir': xbsvdir,
                                   'bsvpath': ':'.join(list(set([os.path.dirname(os.path.abspath(bsvfile)) for bsvfile in namespace.bsvfile]
                                                                + [os.path.join(xbsvdir, 'bsv')]
                                                                + [os.path.join(xbsvdir, 'lib/bsv')]
                                                                + [os.path.join(xbsvdir, 'generated/xilinx')]))),
                                   'bsvdefines': util.foldl((lambda e,a: e+' -D '+a), '', bsvdefines),
                                   'boardname': boardname,
                                   'OS': namespace.os,
                                   's2hinterface': ' '.join(namespace.s2hinterface),
                                   'h2sinterface': ' '.join(namespace.h2sinterface),
                                   'bsvfiles': ' '.join([ os.path.abspath(bsvfile) for bsvfile in namespace.bsvfile]),
                                   'sourcefiles': ' '.join([os.path.abspath(source) for source in namespace.source]) if namespace.source else '',
                                   'generatedCFiles': ' '.join(generatedCFiles),
                                   'includepath': ' '.join(['-I%s' % os.path.dirname(os.path.abspath(source)) for source in namespace.source]) if namespace.source else '',
                                   'project_dir': os.path.abspath(project_dir),
                                   'topbsvfile' : os.path.abspath(namespace.topbsv),
                                   'topbsvmod'  : namespace.export,
                                   'dut' : namespace.export.lower(),
                                   'Dut': topmodulename,
                                   'timestamp' : int(time.time()),
                                   'clibs': ' '.join(['-l%s' % l for l in namespace.clib]),
                                   'bscflags': ' '.join(namespace.bscflags)
                                   })
    make.close()
    timestamp = util.createDirAndOpen(timestampname, 'w')
    timestamp.close()

    print '############################################################'
    print '## To build:'
    print '    cd %s; make verilog; make bits' % (project_dir)
    print '## You can use XPS to generate bit file or exit and let make complete the process.'

    if namespace.make:
        os.chdir(project_dir)
        os.putenv('PWD', subprocess.check_output(['pwd'])[0:-1])
        subprocess.call(['make'] + namespace.make)
